diff --git a/classification/orientation.c b/classification/orientation.c
new file mode 100644
index 0000000..54042c7
--- /dev/null
+++ b/classification/orientation.c
@@ -0,0 +1,23 @@
+#include "orientation.h"
+
+#include "../commons/vec3d.h"
+
+static Vec3d sitting = {1.99, 9.12, -0.01};
+static Vec3d standing = {-9.68, 0.92, 0.00};
+
+ActionType classify_orientation(BMI2SensAxisData data[], uint32_t length) {
+    Vec3d data_as_vecs[5];
+    for (int i = 0; i < 5; i++) {
+        data_as_vecs[i] = bmisensdata_to_vec3d(data[i]);
+    }
+
+    Vec3d avg = vec3d_avg_unit_5(data_as_vecs[0], data_as_vecs[1], data_as_vecs[2], data_as_vecs[3], data_as_vecs[4]);
+
+    if (vec3d_vector_similarity(avg, sitting) > 0.2) {
+        return SIT;
+    } else if (vec3d_vector_similarity(avg, standing) > 0.2) {
+        return STAND;
+    } else {
+        return OTHER;
+    }
+}
diff --git a/classification/orientation.h b/classification/orientation.h
new file mode 100644
index 0000000..76b25fe
--- /dev/null
+++ b/classification/orientation.h
@@ -0,0 +1,10 @@
+#ifndef ORIENTATION_H
+#define ORIENTATION_H
+
+#include <stdint.h>
+#include "../commons/data_formats.h"
+#include "classify.h"
+
+ActionType classify_orientation(BMI2SensAxisData data[], uint32_t length);
+
+#endif
\ No newline at end of file
diff --git a/commons/vec3d.c b/commons/vec3d.c
index 1da0c1d..cdb416d 100644
--- a/commons/vec3d.c
+++ b/commons/vec3d.c
@@ -128,3 +128,23 @@ Vec3d vec3d_rotate_by_rotation_vector_assuming_things_that_arent_true(Vec3d a, V
 
     return rotated;
 }
+
+//double avg_orientation(vec3d a,vec3d b,vec3d c,vec3d d,vec3d e) {
+Vec3d vec3d_avg_unit_5(Vec3d a,Vec3d b,Vec3d c,Vec3d d,Vec3d e) {
+	
+	double x = (a.x + b.x + c.x + d.x + e.x);
+	double y = (a.y + b.y + c.y + d.y + e.y);
+	double z = (a.z + b.z + c.z + d.z + e.z);
+	
+	double mag = x*x + y*y + z*z;	
+	mag = sqrt(mag); 
+	//I could do like the error of like all 3 axes but Idt you give af about any of them except like, down
+	//return (1 - abs(y)/mag)
+	return (Vec3d){x/mag, y/mag, z/mag};
+
+}
+
+double vec3d_vector_similarity(Vec3d a, Vec3d b) {
+    return vec3d_dot_product(a, b) / (vec3d_magnitude(a) * vec3d_magnitude(b));
+    // a.b = |a||b|cos(theta) => cos(theta) = a.b / |a||b|
+}
\ No newline at end of file
diff --git a/commons/vec3d.h b/commons/vec3d.h
index 50791b2..007a00f 100644
--- a/commons/vec3d.h
+++ b/commons/vec3d.h
@@ -29,5 +29,7 @@ Vec3d vec3d_rotate_about_z(Vec3d a, double angle);
 Vec3d vec3d_rotate_by_rotation_vector_assuming_things_that_arent_true(Vec3d a, Vec3d rotation_vector);
 Vec3d bmisensdata_to_vec3d(BMI2SensAxisData data);
 BMI2SensAxisData vec3d_to_bmisensdata(Vec3d data);
+Vec3d vec3d_avg_unit_5(Vec3d a,Vec3d b,Vec3d c,Vec3d d,Vec3d e);
+double vec3d_vector_similarity(Vec3d a, Vec3d b);
 
 #endif
